Function.prototype.fastClass=function(n){var r=this,i=(n||function(){this.constructor=function(){r.apply(this,arguments)}})(this.prototype,this),t;return console.assert(typeof i=="function","Your .fastClass' creator didn't return a function. fastClass expects an argument of type function with two parameters: base and baseCtor (the prototype respectively construrctor of the 'base' class to be derrivated). You should return a new function that would return the new prototype i.e. return function() { this.constructor = function() { baseCtor.apply(this, arguments); }"),i.prototype=this.prototype,t=new i,t.hasOwnProperty("constructor")||(t.constructor=function(){r.apply(this,arguments)}),t.constructor.prototype=t,t.constructor};