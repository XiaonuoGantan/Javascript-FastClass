(function(){function n(){}var t=typeof Object.defineProperty=="function";Function.prototype.inherit=function(i,r){n.prototype=this.prototype;var u=i.call(this,this.prototype,this);return u.prototype=new n,this.__class=u.__class=1,r&&t?Object.defineProperty(extendeePrototype,"constructor",{enumerable:!1,value:u}):u.prototype.constructor=u,u},Function.prototype.extend=function(n){var t=n.call(this,this.prototype,this);return this.__class=t.__class=1,t},Function.prototype.override=function(i,r,u){var f,e;if(n.prototype=i,f=new n,this.prototype=f,u&&t?Object.defineProperty(f,"constructor",{enumerable:!1,value:this}):f.constructor=this,r)for(e in r)f[e]=r[e];return this},Function.prototype.inheritWith=function(i,r){var s=this,u=i.call(this,this.prototype,this)||{},f=u.constructor||function(){s.apply(this,arguments)},e,o;n.prototype=this.prototype,f.prototype=e=new n;for(o in u)e[o]=u[o];return r&&t&&Object.defineProperty(e,"constructor",{enumerable:!1,value:f}),f},Function.prototype.define=function(n){var i=this.prototype,t;if(n)for(t in n)i[t]=n[t];return this},Function.prototype.fastClass=function(n){var r=this,i=(n||function(){this.constructor=function(){r.apply(this,arguments)}})(this.prototype,this),t;return console.assert(typeof i=="function","Your .fastClass' creator didn't return a function. fastClass expects an argument of type function with two parameters: base and baseCtor (the prototype respectively construrctor of the 'base' class to be derrivated). You should return a new function that would return the new prototype i.e. return function() { this.constructor = function() { baseCtor.apply(this, arguments); }"),i.prototype=this.prototype,t=new i,t.hasOwnProperty("constructor")||(t.constructor=function(){r.apply(this,arguments)}),t.constructor.prototype=t,t.constructor}})();