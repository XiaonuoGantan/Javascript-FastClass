function selfTest(){var expecteds,expectedKey,expected,actual;window.a=new A("a"),a.method1("x","y","z"),console.assert(a.x=="x","a.x should be set to 'x'"),console.assert(a.y=="y","a.y should be set to 'y'"),console.assert(a.z=="z","a.z should be set to 'z'"),window.b=new B("b"),b.method1("y","z"),console.assert(b.x=="x","b.x should be set to 'x'"),console.assert(b.y=="y","b.y should be set to 'y'"),console.assert(b.z=="z","b.z should be set to 'z'"),window.c=new C("c"),c.method1("z"),console.assert(c.x=="x","c.x should be set to 'x'"),console.assert(c.y=="y","c.y should be set to 'y'"),console.assert(c.z=="z","c.z should be set to 'z'"),window.d=new D("d"),d.method1("w"),console.assert(d.x=="x","d.x should be set to 'x'"),console.assert(d.y=="y","d.y should be set to 'y'"),console.assert(d.z=="w","d.z should be set to 'w'"),expecteds={"d instanceof A":!0,"d instanceof B":!0,"d instanceof C":!0,"d instanceof D":!0,"c instanceof A":!0,"c instanceof B":!0,"c instanceof C":!0,"b instanceof A":!0,"b instanceof B":!0,"b instanceof C":!1,"a instanceof A":!0,"a instanceof B":!1,"a instanceof C":!1,"A.prototype.constructor === a.constructor && a.constructor === A":!0,"B.prototype.constructor === b.constructor && b.constructor === B":!0,"C.prototype.constructor === c.constructor && c.constructor === C":!0,"D.prototype.constructor === d.constructor && d.constructor === D":!0};for(expectedKey in expecteds)expected=expecteds[expectedKey],actual=eval(expectedKey),console.assert(!(expected^actual),expectedKey+" expected: "+expected+", actual: "+actual)}var A;(function(){function n(){}var t=typeof Object.defineProperty=="function";Function.prototype.inherit=function(i,r){n.prototype=this.prototype;var u=i.call(this,this.prototype,this);return u.prototype=new n,this.__class=u.__class=1,r&&t?Object.defineProperty(extendeePrototype,"constructor",{enumerable:!1,value:u}):u.prototype.constructor=u,u},Function.prototype.extend=function(n){var t=n.call(this,this.prototype,this);return this.__class=t.__class=1,t},Function.prototype.override=function(i,r,u){var f,e;if(n.prototype=i,f=new n,this.prototype=f,u&&t?Object.defineProperty(f,"constructor",{enumerable:!1,value:this}):f.constructor=this,r)for(e in r)f[e]=r[e];return this},Function.prototype.inheritWith=function(i,r){var s=this,u=i.call(this,this.prototype,this)||{},f=u.constructor||function(){s.apply(this,arguments)},e,o;n.prototype=this.prototype,f.prototype=e=new n;for(o in u)e[o]=u[o];return r&&t&&Object.defineProperty(e,"constructor",{enumerable:!1,value:f}),f},Function.prototype.define=function(n){var i=this.prototype,t;if(n)for(t in n)i[t]=n[t];return this},Function.prototype.fastClass=function(n){var i=this,r=this.prototype,t;return n=n||function(){this.constructor=function(){i.apply(this,arguments)}},n.prototype=r,t=new n(r,this),t.hasOwnProperty("constructor")||(t.constructor=function(){i.apply(this,arguments)}),t.constructor.prototype=t,t.constructor}})(),A=function(n){n&&(this.val=n)},A.prototype.method1=function(n,t,i){this.x=n,this.y=t,this.z=i};var B=A.extend(function(n,t){return function(){t.apply(this,arguments)}.override(n,{method1:function(t,i){n.method1.call(this,"x",t,i)}})}),C=B.extend(function(n,t){return function(){t.apply(this,arguments)}.override(n,{method1:function(t){n.method1.call(this,"y",t)}})}),D=C.extend(function(n,t){return function(){t.apply(this,arguments)}.override(n,{method1:function(t){n.method1.call(this,t)}})});selfTest();var A=function(n){n&&(this.val=n)}.define({method1:function(n,t,i){this.x=n,this.y=t,this.z=i}}),B=A.inheritWith(function(n,t){return{constructor:function(n){t.call(this,n)},method1:function(t,i){n.method1.call(this,"x","y",i)}}}),C=B.inheritWith(function(n,t){return{constructor:function(n){t.call(this,n)},method1:function(t){n.method1.call(this,"y",t)}}}),D=C.inheritWith(function(n,t){return{constructor:function(n){t.call(this,n)},method1:function(t){n.method1.call(this,t)}}});selfTest();var A=function(n){n&&(this.val=n)}.define({method1:function(n,t,i){this.x=n,this.y=t,this.z=i}}),B=A.fastClass(function(n,t){this.constructor=function(n){t.call(this,n)},this.method1=function(t,i){n.method1.call(this,"x",t,i)}}),C=B.fastClass(function(n,t){this.constructor=function(n){t.call(this,n)},this.method1=function(t){n.method1.call(this,"y",t)}}),D=C.fastClass(function(n,t){this.constructor=function(n){t.call(this,n)},this.method1=function(t){n.method1.call(this,t)}});selfTest(),console.log("If there are no asserts in the console then all tests have passed! yey :)");